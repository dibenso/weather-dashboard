{"version":3,"sources":["Search.js","CurrentWeather.js","Forecast.js","Weather.js","App.js","reportWebVitals.js","index.js"],"names":["Search","setLocation","useState","autoCompleteList","setAutoCompleteList","cityInput","setCityInput","open","setOpen","JSON","parse","localStorage","getItem","history","setHistory","fetchAutoComplete","value","fetch","then","response","json","cityData","debouncedFetchAutoComlete","debounce","onChange","target","selection","historyStackSet","Set","setItem","stringify","itemToString","item","city","state_name","getInputProps","getItemProps","getLabelProps","getMenuProps","isOpen","highlightedIndex","selectedItem","getRootProps","style","display","suppressRefError","Form","Group","Label","Control","onKeyDown","event","code","preventDefault","input","placeholder","ListGroup","map","index","Item","key","String","backgroundColor","fontWeight","Accordion","maxWidth","margin","boxShadow","marginBottom","Card","Header","Toggle","as","Button","variant","eventKey","onClick","textDecoration","size","color","Collapse","Body","CurrentWeather","uvIndex","weather","width","Img","src","current","icon","Title","description","Math","round","temp","humidity","wind_speed","uvi","height","marginLeft","Forecast","currentDate","Date","daily","slice","weatherData","dateFormat","getFullYear","getMonth","getDate","day","Weather","location","App","setWeatherData","fetching","setFetching","error","setError","useEffect","a","lat","lng","Container","fluid","textAlign","className","type","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c50b3e0a.chunk.js","sourcesContent":["import { useState } from \"react\";\nimport { Form, ListGroup, Accordion, Card, Button } from \"react-bootstrap\";\nimport Downshift from \"downshift\";\nimport debounce from \"debounce\";\nimport { FaPlusCircle, FaMinusCircle } from \"react-icons/fa\";\n\nexport default function Search({ setLocation }) {\n  const [autoCompleteList, setAutoCompleteList] = useState(null);\n  const [cityInput, setCityInput] = useState(null);\n  const [open, setOpen] = useState(false);\n  const [history, setHistory] = useState(JSON.parse(localStorage.getItem(\"history\")));\n  const fetchAutoComplete = value => {\n    if (value) {\n      fetch(`http://localhost:8080/api/autocomplete/${value}`)\n        .then(response => response.json())\n        .then(cityData => {\n          if (cityData) setAutoCompleteList(cityData);\n        });\n    }\n  };\n  const debouncedFetchAutoComlete = debounce(fetchAutoComplete, 400);\n  const onChange = ({ target: { value } }) => {\n    setCityInput(value);\n    debouncedFetchAutoComlete(value);\n  };\n  const toggleOpen = () => setOpen(!open);\n\n  return (\n    <>\n      <Downshift\n        onChange={selection => {\n          const historyStackSet = history ? [...new Set([selection, ...history])] : [...new Set([selection])];\n\n          localStorage.setItem(\"location\", JSON.stringify(selection));\n          localStorage.setItem(\"history\", JSON.stringify(historyStackSet));\n          setLocation(selection);\n          setHistory(historyStackSet);\n          fetchAutoComplete(selection);\n        }}\n        itemToString={item => (item ? `${item.city}, ${item.state_name}` : \"\")}>\n        {({\n          getInputProps,\n          getItemProps,\n          getLabelProps,\n          getMenuProps,\n          isOpen,\n          highlightedIndex,\n          selectedItem,\n          getRootProps\n        }) => (\n          <div>\n            <div style={{ display: \"inline-block\" }} {...getRootProps({}, { suppressRefError: true })}>\n              <Form>\n                <Form.Group>\n                  <Form.Label {...getLabelProps()}>City</Form.Label>\n                  <Form.Control\n                    {...getInputProps({\n                      onChange,\n                      onKeyDown: event => {\n                        if (event.code === \"Enter\") event.preventDefault();\n                      },\n                      input: cityInput,\n                      placeholder: \"Enter city\"\n                    })}\n                  />\n                </Form.Group>\n              </Form>\n            </div>\n            <ListGroup {...getMenuProps()}>\n              {isOpen && autoCompleteList\n                ? autoCompleteList.map((item, index) => (\n                    <ListGroup.Item\n                      {...getItemProps({\n                        key: String(index),\n                        index,\n                        item,\n                        style: {\n                          backgroundColor: highlightedIndex === index ? \"lightgray\" : \"white\",\n                          fontWeight: selectedItem === item ? \"bold\" : \"normal\"\n                        }\n                      })}>\n                      {`${item.city}, ${item.state_name}`}\n                    </ListGroup.Item>\n                  ))\n                : null}\n            </ListGroup>\n          </div>\n        )}\n      </Downshift>\n      {history && (\n        <Accordion style={{ maxWidth: 500, margin: \"0 auto\", boxShadow: \"5px 5px 15px 5px #000000\", marginBottom: 20 }}>\n          <Card>\n            <Card.Header>\n              <Accordion.Toggle\n                as={Button}\n                variant=\"link\"\n                eventKey=\"0\"\n                onClick={toggleOpen}\n                style={{ textDecoration: \"none\" }}>\n                {open ? <FaMinusCircle size={30} color=\"black\" /> : <FaPlusCircle size={30} color=\"black\" />}\n                {\" Recent Searches\"}\n              </Accordion.Toggle>\n            </Card.Header>\n            <Accordion.Collapse eventKey=\"0\">\n              <Card.Body>\n                {history.map((cityData, index) => (\n                  <p key={String(index)} onClick={() => setLocation(cityData)}>\n                    {`${cityData.city}, ${cityData.state_name}`}\n                  </p>\n                ))}\n              </Card.Body>\n            </Accordion.Collapse>\n          </Card>\n        </Accordion>\n      )}\n    </>\n  );\n}\n","import { Card } from \"react-bootstrap\";\nimport { FaThermometerHalf, FaWind } from \"react-icons/fa\";\n\nfunction uvIndexColor(uvIndex) {\n  if (uvIndex <= 3) return \"rgba(0, 120, 6, 0.6)\";\n  if (uvIndex <= 6) return \"rgba(208, 119, 0, 0.6)\";\n\n  return \"rgba(208, 0, 0, 0.6)\";\n}\n\nexport default function CurrentWeather({ weather }) {\n  return (\n    <Card\n      style={{\n        width: \"15rem\",\n        backgroundColor: \"rgba(0, 0, 0, 0.3)\",\n        margin: \"0 auto\",\n        marginBottom: 50,\n        boxShadow: \"5px 5px 15px 5px #000000\"\n      }}>\n      <Card.Img variant=\"top\" src={`http://openweathermap.org/img/wn/${weather.current.weather[0].icon}@2x.png`} />\n      <Card.Body>\n        <Card.Title>{weather.current.weather[0].description}</Card.Title>\n        <h2>\n          <FaThermometerHalf size={30} color=\"black\" />\n          {` ${Math.round(weather.current.temp)}°`}\n        </h2>\n        <br />\n        {`Humidity: ${weather.current.humidity}%`}\n        <br />\n        <FaWind size={20} color=\"black\" />\n        {` ${weather.current.wind_speed} MPH`}\n        <br />\n        {`UV Index: ${weather.current.uvi}`}\n        <div\n          style={{\n            display: \"inline-block\",\n            height: 15,\n            width: 15,\n            backgroundColor: uvIndexColor(weather.current.uvi),\n            marginLeft: 10\n          }}\n        />\n      </Card.Body>\n    </Card>\n  );\n}\n","import { Card } from \"react-bootstrap\";\nimport { FaThermometerHalf } from \"react-icons/fa\";\nimport dateFormat from \"dateformat\";\n\nexport default function Forecast({ weather }) {\n  const currentDate = new Date();\n\n  return (\n    <div>\n      {weather.daily.slice(0, 5).map((weatherData, index) => (\n        <Card\n          key={String(index)}\n          style={{\n            width: \"15rem\",\n            backgroundColor: \"rgba(0, 0, 0, 0.3)\",\n            margin: \"0 auto\",\n            marginBottom: 20,\n            boxShadow: \"5px 5px 15px 5px #000000\",\n            display: \"inline-block\"\n          }}>\n          <Card.Img variant=\"top\" src={`http://openweathermap.org/img/wn/${weatherData.weather[0].icon}@2x.png`} />\n          <Card.Body>\n            <Card.Title>\n              {dateFormat(\n                new Date(currentDate.getFullYear(), currentDate.getMonth(), currentDate.getDate() + index),\n                \"dddd, mmmm dS, yyyy\"\n              )}\n            </Card.Title>\n            <p>{weatherData.weather[0].description}</p>\n            <h2>\n              <FaThermometerHalf size={30} color=\"black\" />\n              {` ${Math.round(weatherData.temp.day)}°`}\n            </h2>\n            <br />\n            {`Humidity: ${weatherData.humidity}%`}\n          </Card.Body>\n        </Card>\n      ))}\n    </div>\n  );\n}\n","import dateFormat from \"dateformat\";\nimport CurrentWeather from \"./CurrentWeather\";\nimport Forecast from \"./Forecast\";\n\nexport default function Weather({ weather, location }) {\n  return (\n    <>\n      <h2>{location.city}</h2>\n      <p>{dateFormat(new Date(), \"dddd, mmmm dS, yyyy\")}</p>\n      <CurrentWeather weather={weather} />\n      <Forecast weather={weather} />\n    </>\n  );\n}\n","import { useEffect, useState } from \"react\";\nimport { Container } from \"react-bootstrap\";\nimport Loader from \"react-loader-spinner\";\nimport Search from \"./Search\";\nimport Weather from \"./Weather\";\n\nfunction App() {\n  const [location, setLocation] = useState(JSON.parse(localStorage.getItem(\"location\")));\n  const [weatherData, setWeatherData] = useState(null);\n  const [fetching, setFetching] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(async () => {\n    if (location)\n      try {\n        setFetching(true);\n\n        const { lat, lng } = location;\n        const response = await fetch(`http://localhost:8080/api/weather/${lat}/${lng}`);\n\n        setFetching(false);\n        setWeatherData(await response.json());\n        setError(null);\n      } catch {\n        setFetching(false);\n        setError(\"Unable to retrieve weather data\");\n      }\n  }, [location]);\n\n  return (\n    <>\n      <Container fluid style={{ textAlign: \"center\" }}>\n        <h1 className=\"display-3\">Weather Dashboard</h1>\n        {error && error}\n        <Search setLocation={setLocation} />\n        {fetching && (\n          <>\n            <Loader type=\"Puff\" color=\"black\" height={100} width={100} />\n            <h2>Retrieving Weather Data...</h2>\n          </>\n        )}\n        {weatherData && <Weather weather={weatherData} location={location} />}\n      </Container>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}